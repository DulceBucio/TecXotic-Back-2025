import cv2
import pytesseract
import pyttsx3
from difflib import SequenceMatcher

# Define the full DNA sequences for each specimen
specimens = {
    "Bighead Carp": "CTTCTGGTAGTACCTATATGGTTCAGTACATATTATGTATTATGTTACCTAATGTACTAATACCTATATATGTATTATCACCATTAATTTATTTTAACCTTAAAGCAAGTACTAACGTTTAAAAACGTACATAAACCAAAATATTAAGATTCATAAATAAATTATCTTAACTTAAATAAACAGATTATTCCACTAACAATTGATTCTCAAATTTATTACTGAATTATTAACTAAAATCTAACTCAAGTATATTATTAAAGTAAGAGACCACCTACTTATTTATATTAAGGTATTATATTCATGATAAGATCAAGGACAATAACAGTGGGGGTGGCGCAAAATGAACTATTACTTGCATCTGGTTTGGAATCTCACGGACATGGCTACAAAATTCCACCCCCGTTACATTATAACTGGCATATGGTTAAATGATGTGAGTACATACTCCTCATTAACCCCACATGCCGAGCATTCTTTTATATGCATAGGGGTTCTCCTTTTGGTTTCCTTTCACCTTGCATATCAGAGTGCAAGCTCAAATAGTAAAATAAGGTTGAACATATTCCTTGCTTGTGTTAAAGTAAGTTAATTATTAAAAGACATAACTTAAGAATTACATATTTCTCACTCAAGTGCATAACATATTCATTCTTTCTTCAACTTACCCCTATATATATGCCCCCCCTTTTGGCTTCTGCGCGACAAACCCCCCTACCCCCTACGCTCAGCAAATCCTGTTATCCTTGTCAAACCCCAAAACCAAGGAAGGTTCGAGAACGTGCAAGCTAACAAGTTGAAATATGGGTTAGCTATCCGCATTATATATATATATATACATACACATCACATCAATTTACCACATAATTCCCCAAACATTGACCTAAAAACCCCTATTAAATTTATAGGACATGCCCCAATGCTAAAAAGTCCAACATTATATAATGCTAG",
    "Silver Carp": "TCTTCTGATATAACCTATATGGTTTAATACATATATGTATTATATTACATAATGCATTAGTACTAGTATATGTATTATCACCATTCATTTATATTAACCTTAAAGCAAGTACTAACGTTTAAGACGTACATAAACCAAATATTTAAAATTCACAATTAATTTATTTAAACCTGAGAAAAGAGTTGTTCCACTATAATTGGTTCTCAAATATTTCCTTGAAATATTAACTTCTATTTAATTTAACTATATTAATGTAGTAAGAAACCACCTACTGGTTTATATTAAGGTATTCTATTCATGATAAGATCAGGGACAATAATCGTGGGGGTGGCGCAGAATGAACTATTACTTGCATTTGGCTTGGAATCTCACGGACATGACTGTAAAATTCCACCCTCCATACATTATATCTGGCATCTGGTTAAATGATGTGAGTACATACTCCTCATTAACCCCACATGCCGAGCATTCTTTTATATGCATAGGGGTTCTCCTTTTGGTTACCTTTCATCTTGCATATCAGAGTGCAGGCTCAAATGATAAATTAAGGTTGAACATATTCCTTGCTTAAGTTAAAGTAGGTTAATTATTGAAAGACATAACTTAAGAATTACATATTTTTAATTCAAGTGCATAACATATTATTCTTTCTTCAACTTACCCTTATATATATGCCCCCCTTTCGGTTTCTGCGCGACAAACCCCCTTACCCCCTACGCTCAACAAATCCTGTTATCCTTGTCAAACCCCAAAACCAAGGAAGGTTCGAGAACGTGCAAGCTAACAAGTTGAAATATGAGTTAGCTATCCGCATTATATATATATATATACATACACATCGCGTCAATTCGCCACATAATTCCCCAAATATAAACCTAAAAATTCCTATTAAATTTTAAGGGGCACGCCCCAATGCTAAAAAGTCCAACATTAAATAACGCTAGCGTAG",
    "Grass Carp": "GACATTGCTACCCTCTATCTTGTATTTGGTGCCTGAGCCGGAATAGTGGGAACCGCTCTAAGCCTTCTCATTCGAGCCGAACTAAGCCAACCCGGATCACTTCTGGGCGATGATCAAATTTATAATGTTATTGTCACTGCCCATGCCTTCGTAATAATTTTCTTTATAGTAATACCAATTCTTATTGGAGGGTTTGGAAATTGACTCGTACCATTAATAATTGGAGCACCCGACATAGCATTCCCACGAATAAACAACATGAGTTTCTGACTTCTACCCCCTTCTTTCCTCCTACTATTAGCCTCTTCTGGTGTTGAGGCCGGAGCTGGAACAGGGTGAACAGTTTACCCACCACTCGCAGGCAATCTTGCCCACGCAGGAGCATCCGTAGACCTAACAATTTTCTCACTCCACCTGGCAGGTGTGTCATCAATTTTAGGGGCAATTAATTTTATTACTACAACCATTAACATGAAACCACCAGCCATCTCCCAATACCAAACACCTCTCTTCGTTTGAGCTGTACTTGTAACAGCTGTACTCCTTCTTCTATCTCTACCAGTTCTAGCCGCCGGAATTACAATACTCCTAACAGACCGTAATCTTAACACTACATTCTTTGACCCGGCGGGAGGAGGAGACCCAATTCTTTATCAACACTTATTCTGATTCTTTGGTCACCCGGAAGTTTATATTCTTATTTTACCCGGATTTGGAATCATTTCACATGTTGTAGCCTACTATGCAGGTAAAAAAGAACCATTCGGTTATATAGGAATAGTCTGAGCTATAATGGCTATTGGTCTTCTAGGGTTTATTGTATGAGCCCACCATATGTTTACTGTTGGGATAGACGTAGACACTCGTGCATATTTTACATCCGCAACGATAATTATTGCTATCCCAACAGGTGTAAAAGTATTTAGCTGACTAGCCACAC",
    "Black Carp": "GACATTGGTACCCTTTATCTTGTATTTGGTGCCTGAGCCGGAATAGTGGGAACCGCTCTAAGCCTTCTCATTCGAGCCGAACTAAGCCAACCCGGATCACTTCTGGGCGATGACCAAATTTATAATGTTATTGTCACTGCCCATGCCTTCGTAATAATTTTCTTTATAGTAATACCAATTCTTATTGGAGGATTCGGAAACTGACTCGTACCGCTAATAATTGGAGCACCTGATATAGCATTCCCCCGAATGAATAACATAAGCTTCTGACTTCTGCCCCCATCTTTCCTCCTACTACTAGCCTCTTCTGGTGTTGAAGCTGGGGCTGGGACAGGGTGAACAGTCTACCCACCACTCGCAGGCAATCTTGCACACGCAGGAGCATCTGTAGATCTAACAATCTTTTCGCTACACCTGGCAGGTGTGTCATCAATTTTAGGAGCGATTAACTTCATCACTACAACTATCAACATAAAACCCCCAGCCATTTCTCAATACCAAACACCTCTCTTTGTCTGAGCTGTGCTAGTAACAGCCGTACTCCTTCTCCTATCCCTACCAGTCCTAGCTGCTGGAATTACAATACTCCTTACAGACCGTAACCTTAACACCACGTTCTTTGACCCAGCAGGCGGAGGAGACCCAATCCTATATCAACACCTGTTCTGATTCTTCGGCCACCCAGAAGTTTACATTCTTATTTTACCCGGGTTTGGGATCATTTCACACGTCGTAGCCTACTACGCGGGCAAAAAAGAACCATTTGGTTACATAGGAATGGTTTGAGCCATGATGGCTATTGGTCTCCTAGGATTTATTGTGTGAGCCCACCACATGTTTACTGTCGGAATAGACGTAGACACTCGTGCATACTTTACATCCGCAACAATAATTATTGCTATCCCAACAGGTGTAAAAGTGTTTAGCTGACTAGCC"
}

def identify_specimen(partial_sequence):
    max_similarity = 0
    identified_specimen = "Unknown"

    # Compare the partial sequence with each specimen's full sequence
    for specimen, full_sequence in specimens.items():
        # Calculate similarity using SequenceMatcher
        similarity = SequenceMatcher(None, partial_sequence, full_sequence).ratio()

        # Update the identified specimen if the similarity is higher
        if similarity > max_similarity:
            max_similarity = similarity
            identified_specimen = specimen

    return identified_specimen, max_similarity



print("WEBCAM START")
pytesseract.pytesseract.tesseract_cmd = 'C:\\Program Files\\Tesseract-OCR\\tesseract.exe'
cong = r'--oem 1 --psm 6' #  outputbase digits'
cam = cv2.VideoCapture(1)


while True:
    ret, img = cam.read()
    img = cv2.cvtColor(img, cv2.COLOR_BGR2RGB)
    boxes = pytesseract.image_to_data(img, config=cong)
    words = []

    for x, b in enumerate(boxes.splitlines()):
        if x != 0:
            b = b.split()
            if len(b) == 12:
                x, y, w, h = int(b[6]), int(b[7]), int(b[8]), int(b[9])
                cv2.rectangle(img, (x, y), (w + x, h + y), (0, 255, 0), 1)
                cv2.putText(img, b[11], (x, y), cv2.FONT_HERSHEY_COMPLEX, 0.45, (0, 255, 0), 1) # COLOR BLUEalv (50, 50, 255)
                print(b)
                words.append(b[11])
    img = cv2.cvtColor(img, cv2.COLOR_RGB2BGR)
    cv2.imshow("ALV", img)

    key = cv2.waitKey(1)
    if key == 112:
        sentence = ''.join(words)
        # pyttsx3.speak(sentence)
        partial_sequence = sentence
        specimen, similarity = identify_specimen(partial_sequence)
        print(sentence)
        print("Here it goes:")
        print(f"The partial sequence belongs to: {specimen} (Similarity: {similarity:.2%})")
        print("here it ednsd")
        break


    if key == 27 or key == ord('q'):
        break

pyttsx3.speak("Baaii")
cam.release()
cv2.destroyAllWindows()




