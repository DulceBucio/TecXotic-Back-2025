from flask import Flask, request, jsonify, Blueprint
from PIL import Image
import pytesseract
from difflib import SequenceMatcher
import io 
from flask_cors import CORS

DNA = Blueprint('DNA', __name__)
CORS(DNA)

specimens = {
    "Bighead Carp": "CTTCTGGTAGTACCTATATGGTTCAGTACATATTATGTATTATGTTACCTAATGTACTAATACCTATATATGTATTATCACCATTAATTTATTTTAACCTTAAAGCAAGTACTAACGTTTAAAAACGTACATAAACCAAAATATTAAGATTCATAAATAAATTATCTTAACTTAAATAAACAGATTATTCCACTAACAATTGATTCTCAAATTTATTACTGAATTATTAACTAAAATCTAACTCAAGTATATTATTAAAGTAAGAGACCACCTACTTATTTATATTAAGGTATTATATTCATGATAAGATCAAGGACAATAACAGTGGGGGTGGCGCAAAATGAACTATTACTTGCATCTGGTTTGGAATCTCACGGACATGGCTACAAAATTCCACCCCCGTTACATTATAACTGGCATATGGTTAAATGATGTGAGTACATACTCCTCATTAACCCCACATGCCGAGCATTCTTTTATATGCATAGGGGTTCTCCTTTTGGTTTCCTTTCACCTTGCATATCAGAGTGCAAGCTCAAATAGTAAAATAAGGTTGAACATATTCCTTGCTTGTGTTAAAGTAAGTTAATTATTAAAAGACATAACTTAAGAATTACATATTTCTCACTCAAGTGCATAACATATTCATTCTTTCTTCAACTTACCCCTATATATATGCCCCCCCTTTTGGCTTCTGCGCGACAAACCCCCCTACCCCCTACGCTCAGCAAATCCTGTTATCCTTGTCAAACCCCAAAACCAAGGAAGGTTCGAGAACGTGCAAGCTAACAAGTTGAAATATGGGTTAGCTATCCGCATTATATATATATATATACATACACATCACATCAATTTACCACATAATTCCCCAAACATTGACCTAAAAACCCCTATTAAATTTATAGGACATGCCCCAATGCTAAAAAGTCCAACATTATATAATGCTAG",
    "Silver Carp": "TCTTCTGATATAACCTATATGGTTTAATACATATATGTATTATATTACATAATGCATTAGTACTAGTATATGTATTATCACCATTCATTTATATTAACCTTAAAGCAAGTACTAACGTTTAAGACGTACATAAACCAAATATTTAAAATTCACAATTAATTTATTTAAACCTGAGAAAAGAGTTGTTCCACTATAATTGGTTCTCAAATATTTCCTTGAAATATTAACTTCTATTTAATTTAACTATATTAATGTAGTAAGAAACCACCTACTGGTTTATATTAAGGTATTCTATTCATGATAAGATCAGGGACAATAATCGTGGGGGTGGCGCAGAATGAACTATTACTTGCATTTGGCTTGGAATCTCACGGACATGACTGTAAAATTCCACCCTCCATACATTATATCTGGCATCTGGTTAAATGATGTGAGTACATACTCCTCATTAACCCCACATGCCGAGCATTCTTTTATATGCATAGGGGTTCTCCTTTTGGTTACCTTTCATCTTGCATATCAGAGTGCAGGCTCAAATGATAAATTAAGGTTGAACATATTCCTTGCTTAAGTTAAAGTAGGTTAATTATTGAAAGACATAACTTAAGAATTACATATTTTTAATTCAAGTGCATAACATATTATTCTTTCTTCAACTTACCCTTATATATATGCCCCCCTTTCGGTTTCTGCGCGACAAACCCCCTTACCCCCTACGCTCAACAAATCCTGTTATCCTTGTCAAACCCCAAAACCAAGGAAGGTTCGAGAACGTGCAAGCTAACAAGTTGAAATATGAGTTAGCTATCCGCATTATATATATATATATACATACACATCGCGTCAATTCGCCACATAATTCCCCAAATATAAACCTAAAAATTCCTATTAAATTTTAAGGGGCACGCCCCAATGCTAAAAAGTCCAACATTAAATAACGCTAGCGTAG",
    "Grass Carp": "GACATTGCTACCCTCTATCTTGTATTTGGTGCCTGAGCCGGAATAGTGGGAACCGCTCTAAGCCTTCTCATTCGAGCCGAACTAAGCCAACCCGGATCACTTCTGGGCGATGATCAAATTTATAATGTTATTGTCACTGCCCATGCCTTCGTAATAATTTTCTTTATAGTAATACCAATTCTTATTGGAGGGTTTGGAAATTGACTCGTACCATTAATAATTGGAGCACCCGACATAGCATTCCCACGAATAAACAACATGAGTTTCTGACTTCTACCCCCTTCTTTCCTCCTACTATTAGCCTCTTCTGGTGTTGAGGCCGGAGCTGGAACAGGGTGAACAGTTTACCCACCACTCGCAGGCAATCTTGCCCACGCAGGAGCATCCGTAGACCTAACAATTTTCTCACTCCACCTGGCAGGTGTGTCATCAATTTTAGGGGCAATTAATTTTATTACTACAACCATTAACATGAAACCACCAGCCATCTCCCAATACCAAACACCTCTCTTCGTTTGAGCTGTACTTGTAACAGCTGTACTCCTTCTTCTATCTCTACCAGTTCTAGCCGCCGGAATTACAATACTCCTAACAGACCGTAATCTTAACACTACATTCTTTGACCCGGCGGGAGGAGGAGACCCAATTCTTTATCAACACTTATTCTGATTCTTTGGTCACCCGGAAGTTTATATTCTTATTTTACCCGGATTTGGAATCATTTCACATGTTGTAGCCTACTATGCAGGTAAAAAAGAACCATTCGGTTATATAGGAATAGTCTGAGCTATAATGGCTATTGGTCTTCTAGGGTTTATTGTATGAGCCCACCATATGTTTACTGTTGGGATAGACGTAGACACTCGTGCATATTTTACATCCGCAACGATAATTATTGCTATCCCAACAGGTGTAAAAGTATTTAGCTGACTAGCCACAC",
    "Black Carp": "GACATTGGTACCCTTTATCTTGTATTTGGTGCCTGAGCCGGAATAGTGGGAACCGCTCTAAGCCTTCTCATTCGAGCCGAACTAAGCCAACCCGGATCACTTCTGGGCGATGACCAAATTTATAATGTTATTGTCACTGCCCATGCCTTCGTAATAATTTTCTTTATAGTAATACCAATTCTTATTGGAGGATTCGGAAACTGACTCGTACCGCTAATAATTGGAGCACCTGATATAGCATTCCCCCGAATGAATAACATAAGCTTCTGACTTCTGCCCCCATCTTTCCTCCTACTACTAGCCTCTTCTGGTGTTGAAGCTGGGGCTGGGACAGGGTGAACAGTCTACCCACCACTCGCAGGCAATCTTGCACACGCAGGAGCATCTGTAGATCTAACAATCTTTTCGCTACACCTGGCAGGTGTGTCATCAATTTTAGGAGCGATTAACTTCATCACTACAACTATCAACATAAAACCCCCAGCCATTTCTCAATACCAAACACCTCTCTTTGTCTGAGCTGTGCTAGTAACAGCCGTACTCCTTCTCCTATCCCTACCAGTCCTAGCTGCTGGAATTACAATACTCCTTACAGACCGTAACCTTAACACCACGTTCTTTGACCCAGCAGGCGGAGGAGACCCAATCCTATATCAACACCTGTTCTGATTCTTCGGCCACCCAGAAGTTTACATTCTTATTTTACCCGGGTTTGGGATCATTTCACACGTCGTAGCCTACTACGCGGGCAAAAAAGAACCATTTGGTTACATAGGAATGGTTTGAGCCATGATGGCTATTGGTCTCCTAGGATTTATTGTGTGAGCCCACCACATGTTTACTGTCGGAATAGACGTAGACACTCGTGCATACTTTACATCCGCAACAATAATTATTGCTATCCCAACAGGTGTAAAAGTGTTTAGCTGACTAGCC"
}

def identify_specimen(partial_sequence):
    max_similarity = 0
    identified_specimen = "Unknown"

    # Compare the partial sequence with each specimen's full sequence
    for specimen, full_sequence in specimens.items():
        # Calculate similarity using SequenceMatcher
        similarity = SequenceMatcher(None, partial_sequence, full_sequence).ratio()

        # Update the identified specimen if the similarity is higher
        if similarity > max_similarity:
            max_similarity = similarity
            identified_specimen = specimen

    return identified_specimen, max_similarity

@DNA.route('/DNA', methods=['POST'])
def identify():
    if 'image' not in request.files:
        return jsonify({'error': 'No image provided'}), 400

    image_file = request.files['image']
    try:
        image = Image.open(image_file.stream)
    except Exception as e:
        return jsonify({'error': f'Invalid image: {str(e)}'}), 400

    extracted_text = pytesseract.image_to_string(image, config='--oem 1 --psm 6')
    cleaned_sequence = ''.join(filter(str.isalpha, extracted_text)).upper()

    if not cleaned_sequence:
        return jsonify({'error': 'No valid DNA sequence found in image'}), 400

    specimen, similarity = identify_specimen(cleaned_sequence)

    return jsonify({
        'sequence': cleaned_sequence,
        'specimen': specimen,
        'similarity': round(similarity * 100, 2)
    })



